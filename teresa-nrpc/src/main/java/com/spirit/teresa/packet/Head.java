// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from nrpc.proto

package com.spirit.teresa.packet;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class Head implements Externalizable, Message<Head>, Schema<Head>
{

    public static Schema<Head> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Head getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Head DEFAULT_INSTANCE = new Head();

    
    private Integer version;
    private String serviceName;
    private String serviceCmd;
    private Long seq;
    private String uid;
    private Integer clientIp;
    private Integer serverIp;
    private Integer appid;
    private String referer;
    private String traceId;
    private String pSpanId;
    private Integer format;
    private List<Meta> meta;
    private Integer errorCode;
    private String errorMsg;

    public Head()
    {
        
    }

    // getters and setters

    // version

    public Integer getVersion()
    {
        return version;
    }

    public void setVersion(Integer version)
    {
        this.version = version;
    }

    // serviceName

    public String getServiceName()
    {
        return serviceName;
    }

    public void setServiceName(String serviceName)
    {
        this.serviceName = serviceName;
    }

    // serviceCmd

    public String getServiceCmd()
    {
        return serviceCmd;
    }

    public void setServiceCmd(String serviceCmd)
    {
        this.serviceCmd = serviceCmd;
    }

    // seq

    public Long getSeq()
    {
        return seq;
    }

    public void setSeq(Long seq)
    {
        this.seq = seq;
    }

    // uid

    public String getUid()
    {
        return uid;
    }

    public void setUid(String uid)
    {
        this.uid = uid;
    }

    // clientIp

    public Integer getClientIp()
    {
        return clientIp;
    }

    public void setClientIp(Integer clientIp)
    {
        this.clientIp = clientIp;
    }

    // serverIp

    public Integer getServerIp()
    {
        return serverIp;
    }

    public void setServerIp(Integer serverIp)
    {
        this.serverIp = serverIp;
    }

    // appid

    public Integer getAppid()
    {
        return appid;
    }

    public void setAppid(Integer appid)
    {
        this.appid = appid;
    }

    // referer

    public String getReferer()
    {
        return referer;
    }

    public void setReferer(String referer)
    {
        this.referer = referer;
    }

    // traceId

    public String getTraceId()
    {
        return traceId;
    }

    public void setTraceId(String traceId)
    {
        this.traceId = traceId;
    }

    // pSpanId

    public String getPSpanId()
    {
        return pSpanId;
    }

    public void setPSpanId(String pSpanId)
    {
        this.pSpanId = pSpanId;
    }

    // format

    public Integer getFormat()
    {
        return format;
    }

    public void setFormat(Integer format)
    {
        this.format = format;
    }

    // meta

    public List<Meta> getMetaList()
    {
        return meta;
    }

    public void setMetaList(List<Meta> meta)
    {
        this.meta = meta;
    }

    // errorCode

    public Integer getErrorCode()
    {
        return errorCode;
    }

    public void setErrorCode(Integer errorCode)
    {
        this.errorCode = errorCode;
    }

    // errorMsg

    public String getErrorMsg()
    {
        return errorMsg;
    }

    public void setErrorMsg(String errorMsg)
    {
        this.errorMsg = errorMsg;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Head> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Head newMessage()
    {
        return new Head();
    }

    public Class<Head> typeClass()
    {
        return Head.class;
    }

    public String messageName()
    {
        return Head.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Head.class.getName();
    }

    public boolean isInitialized(Head message)
    {
        return true;
    }

    public void mergeFrom(Input input, Head message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.version = input.readUInt32();
                    break;
                case 2:
                    message.serviceName = input.readString();
                    break;
                case 3:
                    message.serviceCmd = input.readString();
                    break;
                case 4:
                    message.seq = input.readUInt64();
                    break;
                case 5:
                    message.uid = input.readString();
                    break;
                case 6:
                    message.clientIp = input.readUInt32();
                    break;
                case 7:
                    message.serverIp = input.readUInt32();
                    break;
                case 8:
                    message.appid = input.readUInt32();
                    break;
                case 9:
                    message.referer = input.readString();
                    break;
                case 10:
                    message.traceId = input.readString();
                    break;
                case 11:
                    message.pSpanId = input.readString();
                    break;
                case 12:
                    message.format = input.readUInt32();
                    break;
                case 13:
                    if(message.meta == null)
                        message.meta = new ArrayList<Meta>();
                    message.meta.add(input.mergeObject(null, Meta.getSchema()));
                    break;

                case 14:
                    message.errorCode = input.readInt32();
                    break;
                case 15:
                    message.errorMsg = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, Head message) throws IOException
    {
        if(message.version != null)
            output.writeUInt32(1, message.version, false);

        if(message.serviceName != null)
            output.writeString(2, message.serviceName, false);

        if(message.serviceCmd != null)
            output.writeString(3, message.serviceCmd, false);

        if(message.seq != null)
            output.writeUInt64(4, message.seq, false);

        if(message.uid != null)
            output.writeString(5, message.uid, false);

        if(message.clientIp != null)
            output.writeUInt32(6, message.clientIp, false);

        if(message.serverIp != null)
            output.writeUInt32(7, message.serverIp, false);

        if(message.appid != null)
            output.writeUInt32(8, message.appid, false);

        if(message.referer != null)
            output.writeString(9, message.referer, false);

        if(message.traceId != null)
            output.writeString(10, message.traceId, false);

        if(message.pSpanId != null)
            output.writeString(11, message.pSpanId, false);

        if(message.format != null)
            output.writeUInt32(12, message.format, false);

        if(message.meta != null)
        {
            for(Meta meta : message.meta)
            {
                if(meta != null)
                    output.writeObject(13, meta, Meta.getSchema(), true);
            }
        }


        if(message.errorCode != null)
            output.writeInt32(14, message.errorCode, false);

        if(message.errorMsg != null)
            output.writeString(15, message.errorMsg, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "version";
            case 2: return "serviceName";
            case 3: return "serviceCmd";
            case 4: return "seq";
            case 5: return "uid";
            case 6: return "clientIp";
            case 7: return "serverIp";
            case 8: return "appid";
            case 9: return "referer";
            case 10: return "traceId";
            case 11: return "pSpanId";
            case 12: return "format";
            case 13: return "meta";
            case 14: return "errorCode";
            case 15: return "errorMsg";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("version", 1);
        __fieldMap.put("serviceName", 2);
        __fieldMap.put("serviceCmd", 3);
        __fieldMap.put("seq", 4);
        __fieldMap.put("uid", 5);
        __fieldMap.put("clientIp", 6);
        __fieldMap.put("serverIp", 7);
        __fieldMap.put("appid", 8);
        __fieldMap.put("referer", 9);
        __fieldMap.put("traceId", 10);
        __fieldMap.put("pSpanId", 11);
        __fieldMap.put("format", 12);
        __fieldMap.put("meta", 13);
        __fieldMap.put("errorCode", 14);
        __fieldMap.put("errorMsg", 15);
    }
    
}
