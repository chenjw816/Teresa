// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from nrpc.proto

package com.tencent.teresa.packet;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class Meta implements Externalizable, Message<Meta>, Schema<Meta>
{

    public static Schema<Meta> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static Meta getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final Meta DEFAULT_INSTANCE = new Meta();

    
    private String key;
    private String value;

    public Meta()
    {
        
    }

    // getters and setters

    // key

    public String getKey()
    {
        return key;
    }

    public void setKey(String key)
    {
        this.key = key;
    }

    // value

    public String getValue()
    {
        return value;
    }

    public void setValue(String value)
    {
        this.value = value;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<Meta> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public Meta newMessage()
    {
        return new Meta();
    }

    public Class<Meta> typeClass()
    {
        return Meta.class;
    }

    public String messageName()
    {
        return Meta.class.getSimpleName();
    }

    public String messageFullName()
    {
        return Meta.class.getName();
    }

    public boolean isInitialized(Meta message)
    {
        return true;
    }

    public void mergeFrom(Input input, Meta message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.key = input.readString();
                    break;
                case 2:
                    message.value = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, Meta message) throws IOException
    {
        if(message.key != null)
            output.writeString(1, message.key, false);

        if(message.value != null)
            output.writeString(2, message.value, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "key";
            case 2: return "value";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("key", 1);
        __fieldMap.put("value", 2);
    }
    
}
