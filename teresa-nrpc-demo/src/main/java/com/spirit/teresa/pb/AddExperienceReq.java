// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from ilive_experience_svr.proto

package com.spirit.teresa.pb;

import com.dyuproject.protostuff.*;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

public final class AddExperienceReq implements Externalizable, Message<AddExperienceReq>, Schema<AddExperienceReq>
{

    public static Schema<AddExperienceReq> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static AddExperienceReq getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final AddExperienceReq DEFAULT_INSTANCE = new AddExperienceReq();

    
    private Long anchorUid;
    private Long increment;
    private Integer timestamp;
    private Integer bid;
    private String secret;
    private String orderNo;

    public AddExperienceReq()
    {
        
    }

    // getters and setters

    // anchorUid

    public Long getAnchorUid()
    {
        return anchorUid;
    }

    public void setAnchorUid(Long anchorUid)
    {
        this.anchorUid = anchorUid;
    }

    // increment

    public Long getIncrement()
    {
        return increment;
    }

    public void setIncrement(Long increment)
    {
        this.increment = increment;
    }

    // timestamp

    public Integer getTimestamp()
    {
        return timestamp;
    }

    public void setTimestamp(Integer timestamp)
    {
        this.timestamp = timestamp;
    }

    // bid

    public Integer getBid()
    {
        return bid;
    }

    public void setBid(Integer bid)
    {
        this.bid = bid;
    }

    // secret

    public String getSecret()
    {
        return secret;
    }

    public void setSecret(String secret)
    {
        this.secret = secret;
    }

    // orderNo

    public String getOrderNo()
    {
        return orderNo;
    }

    public void setOrderNo(String orderNo)
    {
        this.orderNo = orderNo;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<AddExperienceReq> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public AddExperienceReq newMessage()
    {
        return new AddExperienceReq();
    }

    public Class<AddExperienceReq> typeClass()
    {
        return AddExperienceReq.class;
    }

    public String messageName()
    {
        return AddExperienceReq.class.getSimpleName();
    }

    public String messageFullName()
    {
        return AddExperienceReq.class.getName();
    }

    public boolean isInitialized(AddExperienceReq message)
    {
        return true;
    }

    public void mergeFrom(Input input, AddExperienceReq message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.anchorUid = input.readUInt64();
                    break;
                case 2:
                    message.increment = input.readUInt64();
                    break;
                case 3:
                    message.timestamp = input.readUInt32();
                    break;
                case 4:
                    message.bid = input.readUInt32();
                    break;
                case 5:
                    message.secret = input.readString();
                    break;
                case 6:
                    message.orderNo = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, AddExperienceReq message) throws IOException
    {
        if(message.anchorUid != null)
            output.writeUInt64(1, message.anchorUid, false);

        if(message.increment != null)
            output.writeUInt64(2, message.increment, false);

        if(message.timestamp != null)
            output.writeUInt32(3, message.timestamp, false);

        if(message.bid != null)
            output.writeUInt32(4, message.bid, false);

        if(message.secret != null)
            output.writeString(5, message.secret, false);

        if(message.orderNo != null)
            output.writeString(6, message.orderNo, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "anchorUid";
            case 2: return "increment";
            case 3: return "timestamp";
            case 4: return "bid";
            case 5: return "secret";
            case 6: return "orderNo";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("anchorUid", 1);
        __fieldMap.put("increment", 2);
        __fieldMap.put("timestamp", 3);
        __fieldMap.put("bid", 4);
        __fieldMap.put("secret", 5);
        __fieldMap.put("orderNo", 6);
    }

    @Override
    public String toString() {
        return "AddExperienceReq{" +
                "anchorUid=" + anchorUid +
                ", increment=" + increment +
                ", timestamp=" + timestamp +
                ", bid=" + bid +
                ", secret='" + secret + '\'' +
                ", orderNo='" + orderNo + '\'' +
                '}';
    }
}
