// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from ilive_experience_svr.proto

package com.spirit.teresa.pb;

import com.dyuproject.protostuff.*;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

public final class AddExperienceRsp implements Externalizable, Message<AddExperienceRsp>, Schema<AddExperienceRsp>
{

    public static Schema<AddExperienceRsp> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static AddExperienceRsp getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final AddExperienceRsp DEFAULT_INSTANCE = new AddExperienceRsp();

    
    private Integer result;
    private Long increment;
    private Long experience;
    private Integer level;
    private Long levelMinExp;

    public AddExperienceRsp()
    {
        
    }

    // getters and setters

    // result

    public Integer getResult()
    {
        return result;
    }

    public void setResult(Integer result)
    {
        this.result = result;
    }

    // increment

    public Long getIncrement()
    {
        return increment;
    }

    public void setIncrement(Long increment)
    {
        this.increment = increment;
    }

    // experience

    public Long getExperience()
    {
        return experience;
    }

    public void setExperience(Long experience)
    {
        this.experience = experience;
    }

    // level

    public Integer getLevel()
    {
        return level;
    }

    public void setLevel(Integer level)
    {
        this.level = level;
    }

    // levelMinExp

    public Long getLevelMinExp()
    {
        return levelMinExp;
    }

    public void setLevelMinExp(Long levelMinExp)
    {
        this.levelMinExp = levelMinExp;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<AddExperienceRsp> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public AddExperienceRsp newMessage()
    {
        return new AddExperienceRsp();
    }

    public Class<AddExperienceRsp> typeClass()
    {
        return AddExperienceRsp.class;
    }

    public String messageName()
    {
        return AddExperienceRsp.class.getSimpleName();
    }

    public String messageFullName()
    {
        return AddExperienceRsp.class.getName();
    }

    public boolean isInitialized(AddExperienceRsp message)
    {
        return true;
    }

    public void mergeFrom(Input input, AddExperienceRsp message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.result = input.readUInt32();
                    break;
                case 2:
                    message.increment = input.readUInt64();
                    break;
                case 3:
                    message.experience = input.readUInt64();
                    break;
                case 4:
                    message.level = input.readUInt32();
                    break;
                case 5:
                    message.levelMinExp = input.readUInt64();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, AddExperienceRsp message) throws IOException
    {
        if(message.result != null)
            output.writeUInt32(1, message.result, false);

        if(message.increment != null)
            output.writeUInt64(2, message.increment, false);

        if(message.experience != null)
            output.writeUInt64(3, message.experience, false);

        if(message.level != null)
            output.writeUInt32(4, message.level, false);

        if(message.levelMinExp != null)
            output.writeUInt64(5, message.levelMinExp, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "result";
            case 2: return "increment";
            case 3: return "experience";
            case 4: return "level";
            case 5: return "levelMinExp";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("result", 1);
        __fieldMap.put("increment", 2);
        __fieldMap.put("experience", 3);
        __fieldMap.put("level", 4);
        __fieldMap.put("levelMinExp", 5);
    }
    
}
