// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from ilive.proto

package com.tencent.teresa.packet;

import com.dyuproject.protostuff.*;
import com.tencent.teresa.codec.AbstractIoPacket;
import com.tencent.teresa.codec.IoPacket;
import com.tencent.teresa.serializer.Serializer;
import com.tencent.teresa.utils.U;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

public final class ILiveResponse extends AbstractIoPacket implements Externalizable, Message<ILiveResponse>, Schema<ILiveResponse>
{

    public static Schema<ILiveResponse> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static ILiveResponse getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ILiveResponse DEFAULT_INSTANCE = new ILiveResponse();

    
    private Integer version;
//    private Integer cmd;
//    private Integer subcmd;
//    private Long seq;
    private Long uid;
    private Integer errCode;
    private String errMsg;
    private ByteString binaryBody;
    private ByteString ex;
    private Integer clientType;
    private Integer flag;

    public ILiveResponse(ILiveRequest request) {
        this.version = request.getVersion();
        this.cmd = request.getCmd();
        this.subcmd = request.getSubcmd();
        this.seq = request.getSeq();
        this.uid = request.getUid();
        this.clientType = request.getClientType();
        this.flag = request.getFlag();
    }

    public ILiveResponse()
    {
        
    }

    // getters and setters

    // version

    public Integer getVersion()
    {
        return version;
    }

    public void setVersion(Integer version)
    {
        this.version = version;
    }

    @Override
    public IoPacket newResponsePacket(IoPacket reqPacket, int ec, String message, Object body,Serializer serializer) throws Exception {
        ILiveRequest request = (ILiveRequest) reqPacket;
        byte[] bytes = U.EMPTY_BYTES;
        if (body != null || serializer != null) {
            bytes = serializer.serialize(body);
        }
        ILiveResponse response = new ILiveResponse();
        response.setRouterAddr(request.getRouterAddr());
        response.setErrCode(ec);
        response.setErrMsg(message);
        response.setSeq(request.getSeq());
        response.setUid(request.getUid());
        response.setEx(ByteString.copyFrom(bytes));
        return response;
    }

    @Override
    public Object getContent(Class clazz, Serializer serializer) throws Exception {
        Object response = serializer.deserialize(clazz,getEx().toByteArray());
        return response;
    }

    @Override
    public void setContent(Object content,Serializer serializer) throws Exception {
        this.content = content;
        setEx(ByteString.copyFrom(serializer.serialize(content)));
    }

    // uid

    public Long getUid()
    {
        return uid;
    }

    public void setUid(Long uid)
    {
        this.uid = uid;
    }

    // errCode

    public Integer getErrCode()
    {
        return errCode;
    }

    public void setErrCode(Integer errCode)
    {
        this.errCode = errCode;
    }

    // errMsg

    public String getErrMsg()
    {
        return errMsg;
    }

    public void setErrMsg(String errMsg)
    {
        this.errMsg = errMsg;
    }

    // binaryBody

    public ByteString getBinaryBody()
    {
        return binaryBody;
    }

    public void setBinaryBody(ByteString binaryBody)
    {
        this.binaryBody = binaryBody;
    }

    // ex

    public ByteString getEx()
    {
        return ex;
    }

    public void setEx(ByteString ex)
    {
        this.ex = ex;
    }

    // clientType

    public Integer getClientType()
    {
        return clientType;
    }

    public void setClientType(Integer clientType)
    {
        this.clientType = clientType;
    }

    // flag

    public Integer getFlag()
    {
        return flag;
    }

    public void setFlag(Integer flag)
    {
        this.flag = flag;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    public Schema<ILiveResponse> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    public ILiveResponse newMessage()
    {
        return new ILiveResponse();
    }

    public Class<ILiveResponse> typeClass()
    {
        return ILiveResponse.class;
    }

    public String messageName()
    {
        return ILiveResponse.class.getSimpleName();
    }

    public String messageFullName()
    {
        return ILiveResponse.class.getName();
    }

    public boolean isInitialized(ILiveResponse message)
    {
        return true;
    }

    public void mergeFrom(Input input, ILiveResponse message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.version = input.readUInt32();
                    break;
                case 2:
                    message.cmd = input.readUInt32();
                    break;
                case 3:
                    message.subcmd = input.readUInt32();
                    break;
                case 4:
                    message.seq = input.readUInt64();
                    break;
                case 5:
                    message.uid = input.readUInt64();
                    break;
                case 6:
                    message.errCode = input.readUInt32();
                    break;
                case 7:
                    message.errMsg = input.readString();
                    break;
                case 8:
                    message.binaryBody = input.readBytes();
                    break;
                case 9:
                    message.ex = input.readBytes();
                    break;
                case 10:
                    message.clientType = input.readUInt32();
                    break;
                case 11:
                    message.flag = input.readUInt32();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }   
        }
    }


    public void writeTo(Output output, ILiveResponse message) throws IOException
    {
        if(message.version != null)
            output.writeUInt32(1, message.version, false);

        if(message.cmd != null)
            output.writeUInt32(2, (Integer) message.cmd, false);

        if(message.subcmd != null)
            output.writeUInt32(3, (Integer) message.subcmd, false);

        if(message.seq != null)
            output.writeUInt64(4, message.seq, false);

        if(message.uid != null)
            output.writeUInt64(5, message.uid, false);

        if(message.errCode != null)
            output.writeUInt32(6, message.errCode, false);

        if(message.errMsg != null)
            output.writeString(7, message.errMsg, false);

        if(message.binaryBody != null)
            output.writeBytes(8, message.binaryBody, false);

        if(message.ex != null)
            output.writeBytes(9, message.ex, false);

        if(message.clientType != null)
            output.writeUInt32(10, message.clientType, false);

        if(message.flag != null)
            output.writeUInt32(11, message.flag, false);
    }

    public String getFieldName(int number)
    {
        switch(number)
        {
            case 1: return "version";
            case 2: return "cmd";
            case 3: return "subcmd";
            case 4: return "seq";
            case 5: return "uid";
            case 6: return "errCode";
            case 7: return "errMsg";
            case 8: return "binaryBody";
            case 9: return "ex";
            case 10: return "clientType";
            case 11: return "flag";
            default: return null;
        }
    }

    public int getFieldNumber(String name)
    {
        final Integer number = __fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    private static final java.util.HashMap<String,Integer> __fieldMap = new java.util.HashMap<String,Integer>();
    static
    {
        __fieldMap.put("version", 1);
        __fieldMap.put("cmd", 2);
        __fieldMap.put("subcmd", 3);
        __fieldMap.put("seq", 4);
        __fieldMap.put("uid", 5);
        __fieldMap.put("errCode", 6);
        __fieldMap.put("errMsg", 7);
        __fieldMap.put("binaryBody", 8);
        __fieldMap.put("ex", 9);
        __fieldMap.put("clientType", 10);
        __fieldMap.put("flag", 11);
    }
    
}
